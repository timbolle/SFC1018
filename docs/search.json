[
  {
    "objectID": "SFC1018_Intro_R.html#les-variables",
    "href": "SFC1018_Intro_R.html#les-variables",
    "title": "1 Introduction",
    "section": "2.1 Les variables",
    "text": "2.1 Les variables\nFaire des calculs c’est bien, mais il serait intéressant de pouvoir stocker un résultat quelque part pour pouvoir le réutiliser ultérieurement sans avoir à faire du copier/coller.\nPour conserver le résultat d’une opération, on peut le stocker dans une variable à l’aide de l’opérateur d’assignation &lt;-. Cette “flèche” stocke ce qu’il y a à sa droite dans une variable dont le nom est indiqué à sa gauche.\nPar exemple :\n\nx &lt;- 2\n\nCette commande peut se lire “prend la valeur 2 et mets la dans une variable qui s’appelle x”.\nSi on exécute une commande comportant juste le nom d’une variable, R affiche son contenu.\n\nx\n\n[1] 2\n\n\nOn voit donc que notre variable x contient bien la valeur 2.\nOn peut évidemment réutiliser cette variable dans d’autres opérations : R le remplacera alors par sa valeur.\n\nx + 4\n\n[1] 6\n\n\nOn peut créer autant de variables que l’on veut.\n\nx &lt;- 2\ny &lt;- 5\nresultat &lt;- x + y\nresultat\n\n[1] 7\n\n\nQuand on assigne une nouvelle valeur à une variable déjà existante, la valeur précédente est perdue. Les variables n’ont pas de mémoire.\n\nx &lt;- 2\nx &lt;- 5\nx\n\n[1] 5\n\n\nDe la même manière, assigner une variable à une autre ne crée pas de “lien” entre les deux. Cela copie juste la valeur de la variable de droite dans celle de gauche :\n\nx &lt;- 1\ny &lt;- 3\nx &lt;- y\nx\n\n[1] 3\n\n## Si on modifie y, cela ne modifie pas x\ny &lt;- 4\nx\n\n[1] 3\n\n\nOn le verra, les variable peuvent contenir tout un tas d’informations. Jusqu’ici on n’a stocké que des nombres, mais ils peuvent aussi contenir des chaînes de caractères (du texte), qu’on délimite avec des guillemets simples ou doubles (' ou \") :\n\nchien &lt;- \"Chihuahua\"\nchien\n\n[1] \"Chihuahua\""
  },
  {
    "objectID": "SFC1018_Intro_R.html#les-vecteurs",
    "href": "SFC1018_Intro_R.html#les-vecteurs",
    "title": "1 Introduction",
    "section": "2.2 Les vecteurs",
    "text": "2.2 Les vecteurs\nSi nous voulons stocker plusieurs valeurs d’un coup, nous pouvons le faire dans un seul objet, de type vecteur, avec la syntaxe suivante :\n\ntailles &lt;- c(156, 164, 197, 147, 173)\n\nSi on affiche le contenu de cet objet, on voit qu’il contient bien l’ensemble des tailles saisies.\n\ntailles\n\n[1] 156 164 197 147 173\n\n\nUn vecteur dans R est un objet qui peut contenir plusieurs informations du même type, potentiellement en très grand nombre.\nL’avantage d’un vecteur est que lorsqu’on lui applique une opération, celle-ci s’applique à toutes les valeurs qu’il contient. Ainsi, si on veut la taille en mètres plutôt qu’en centimètres, on peut faire :\n\ntailles_m &lt;- tailles / 100\ntailles_m\n\n[1] 1.56 1.64 1.97 1.47 1.73\n\n\nCela fonctionne pour toutes les opérations de base.\n\ntailles + 10\n\n[1] 166 174 207 157 183\n\ntailles^2\n\n[1] 24336 26896 38809 21609 29929\n\n\nImaginons maintenant qu’on a aussi demandé aux cinq mêmes personnes leur poids en kilos. On peut créer un deuxième vecteur :\n\npoids &lt;- c(45, 59, 110, 44, 88)\n\nOn peut alors effectuer des calculs utilisant nos deux vecteurs tailles et poids. On peut par exemple calculer l’indice de masse corporelle (IMC) de chacun de nos enquêtés en divisant leur poids en kilo par leur taille en mètre au carré :\n\nimc &lt;- poids / (tailles / 100) ^ 2\nimc\n\n[1] 18.49112 21.93635 28.34394 20.36189 29.40292\n\n\nUn vecteur peut contenir des nombres, mais il peut aussi contenir du texte. Imaginons qu’on a demandé aux 5 mêmes personnes leur niveau de diplôme : on peut regrouper l’information dans un vecteur de chaînes de caractères. Une chaîne de caractère contient du texte libre, délimité par des guillemets simples ou doubles.\n\ndiplome &lt;- c(\"CAP\", \"Bac\", \"Bac+2\", \"CAP\", \"Bac+3\")\ndiplome\n\n[1] \"CAP\"   \"Bac\"   \"Bac+2\" \"CAP\"   \"Bac+3\"\n\n\nL’opérateur :, lui, permet de générer rapidement un vecteur comprenant tous les nombres entre deux valeurs, opération assez courante sous R :\n\nx &lt;- 1:10\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nEnfin, notons qu’on peut accéder à un élément particulier d’un vecteur en faisant suivre le nom du vecteur de crochets contenant le numéro de l’élément désiré.\n\ndiplome[2]\n\n[1] \"Bac\"\n\n\nCette opération, qui utilise l’opérateur [], permet donc la sélection d’éléments d’un vecteur.\nDernière remarque, si on affiche dans la console un vecteur avec beaucoup d’éléments, ceux-ci seront répartis sur plusieurs lignes. Par exemple, si on a un vecteur de 50 nombres on peut obtenir quelque chose comme :\n [1] 294 425 339 914 114 896 716 648 915 587 181 926 489\n[14] 848 583 182 662 888 417 133 146 322 400 698 506 944\n[27] 237 324 333 443 487 658 793 288 897 588 697 439 697\n[40] 914 694 126 969 744 927 337 439 226 704 635\nOn remarque que R ajoute systématiquement un nombre entre crochets au début de chaque ligne : il s’agit en fait de la position du premier élément de la ligne dans le vecteur. Ainsi, le 848 de la deuxième ligne est le 14e élément du vecteur, le 914 de la dernière ligne est le 40e, etc.\nCeci explique le [1] qu’on obtient quand on affiche un simple nombre1 :\n [1] 4"
  },
  {
    "objectID": "SFC1018_Intro_R.html#fonctions",
    "href": "SFC1018_Intro_R.html#fonctions",
    "title": "1 Introduction",
    "section": "2.3 Fonctions",
    "text": "2.3 Fonctions\n\n2.3.1 Principe\nNous savons désormais effectuer des opérations arithmétiques de base sur des nombres et des vecteurs, et stocker des valeurs dans des objets pour pouvoir les réutiliser plus tard.\nPour aller plus loin, nous devons aborder les fonctions qui sont, avec les objets, un deuxième concept de base de R. On utilise des fonctions pour effectuer des calculs, obtenir des résultats et accomplir des actions.\nFormellement, une fonction a un nom, elle prend en entrée entre parenthèses un ou plusieurs arguments (ou paramètres), et retourne un résultat.\nPrenons tout de suite un exemple. Si on veut connaître le nombre d’éléments du vecteur tailles que nous avons construit précédemment, on peut utiliser la fonction length, de cette manière :\n\nlength(tailles)\n\n[1] 5\n\n\nIci, length est le nom de la fonction, on l’appelle en lui passant un argument entre parenthèses (en l’occurrence notre vecteur tailles), et elle nous renvoie un résultat, à savoir le nombre d’éléments du vecteur passé en paramètre.\nAutre exemple, les fonctions min et max retournent respectivement les valeurs minimales et maximales d’un vecteur de nombres.\n\nmin(tailles)\n\n[1] 147\n\nmax(tailles)\n\n[1] 197\n\n\nLa fonction mean calcule et retourne la moyenne d’un vecteur de nombres.\n\nmean(tailles)\n\n[1] 167.4\n\n\nLa fonction sum retourne la somme de tous les éléments du vecteur.\n\nsum(tailles)\n\n[1] 837\n\n\nJusqu’à présent on n’a vu que des fonctions qui calculent et retournent un unique nombre. Mais une fonction peut renvoyer d’autres types de résultats. Par exemple, la fonction range (étendue) renvoie un vecteur de deux nombres, le minimum et le maximum.\n\nrange(tailles)\n\n[1] 147 197\n\n\nOu encore, la fonction unique, qui supprime toutes les valeurs en double dans un vecteur, qu’il s’agisse de nombres ou de chaînes de caractères.\n\ndiplome &lt;- c(\"CAP\", \"Bac\", \"Bac+2\", \"CAP\", \"Bac+3\")\nunique(diplome)\n\n[1] \"CAP\"   \"Bac\"   \"Bac+2\" \"Bac+3\"\n\n\n\n\n2.3.2 Arguments\nUne fonction peut prendre plusieurs arguments, dans ce cas on les indique entre parenthèses en les séparant par des virgules.\nOn a déjà rencontré un exemple de fonction acceptant plusieurs arguments : la fonction c, qui combine l’ensemble de ses arguments en un vecteur2.\n\ntailles &lt;- c(156, 164, 197, 181, 173)\n\nIci, c est appelée en lui passant cinq arguments, les cinq tailles séparées par des virgules, et elle renvoie un vecteur numérique regroupant ces cinq valeurs.\nSupposons maintenant que dans notre vecteur tailles nous avons une valeur manquante (une personne a refusé de répondre, ou notre mètre mesureur était en panne). On symbolise celle-ci dans R avec le code interne NA.\n\ntailles &lt;- c(156, 164, 197, NA, 173)\ntailles\n\n[1] 156 164 197  NA 173\n\n\n\n\n\n\n\n\nNote\n\n\n\nNA est l’abbréviation de Not available, non disponible. Cette valeur particulière peut être utilisée pour indiquer une valeur manquante, qu’il s’agisse d’un nombre, d’une chaîne de caractères, etc.\n\n\nSi on calcule maintenant la taille moyenne à l’aide de la fonction mean, on obtient :\n\nmean(tailles)\n\n[1] NA\n\n\nEn effet, R considère par défaut qu’il ne peut pas calculer la moyenne si une des valeurs n’est pas disponible. Dans ce cas il considère que la moyenne est elle-même “non disponible” et renvoie donc NA comme résultat.\nOn peut cependant indiquer à mean d’effectuer le calcul en ignorant les valeurs manquantes. Ceci se fait en ajoutant un argument supplémentaire, nommé na.rm (abbréviation de NA remove, “enlever les NA”), et de lui attribuer la valeur TRUE (code interne de R signifiant vrai).\n\nmean(tailles, na.rm = TRUE)\n\n[1] 172.5\n\n\nPositionner le paramètre na.rm à TRUE indique à la fonction mean de ne pas tenir compte des valeurs manquantes dans le calcul.\nSi on ne dit rien à la fonction mean, cet argument a une valeur par défaut, en l’occurrence FALSE (faux), qui fait qu’il ne supprime pas les valeurs manquantes. Les deux commandes suivantes sont donc rigoureusement équivalentes :\n\nmean(tailles)\n\n[1] NA\n\nmean(tailles, na.rm = FALSE)\n\n[1] NA\n\n\n\n\n\n\n\n\nNote\n\n\n\nLorsqu’on passe un argument à une fonction de cette manière, c’est-à-dire sous la forme nom = valeur, on parle d’argument nommé.\n\n\n\n\n2.3.3 Aide sur une fonction\nIl est fréquent de ne pas savoir (ou d’avoir oublié) quels sont les arguments d’une fonction, ou comment ils se nomment. On peut à tout moment faire appel à l’aide intégrée à R en passant le nom de la fonction (entre guillemets) à la fonction help.\n\nhelp(\"mean\")\n\nOn peut aussi utiliser le raccourci ?mean.\nCes deux commandes affichent une page (en anglais) décrivant la fonction, ses paramètres, son résultat, le tout accompagné de diverses notes, références et exemples. Ces pages d’aide contiennent à peu près tout ce que vous pourrez chercher à savoir, mais elles ne sont pas toujours d’une lecture aisée.\nDans RStudio, les pages d’aide en ligne s’ouvriront par défaut dans la zone en bas à droite, sous l’onglet Help. Un clic sur l’icône en forme de maison vous affichera la page d’accueil de l’aide."
  },
  {
    "objectID": "SFC1018_Intro_R.html#commentaires",
    "href": "SFC1018_Intro_R.html#commentaires",
    "title": "1 Introduction",
    "section": "2.4 Commentaires",
    "text": "2.4 Commentaires\nLes commentaires sont un élément très important d’un script. Il s’agit de texte libre, ignoré par R, et qui permet de décrire les étapes du script, sa logique, les raisons pour lesquelles on a procédé de telle ou telle manière… Il est primordial de documenter ses scripts à l’aide de commentaires, car il est très facile de ne plus se retrouver dans un programme qu’on a produit soi-même, même après une courte interruption.\nPour ajouter un commentaire, il suffit de le faire précéder d’un ou plusieurs symboles #. En effet, dès que R rencontre ce caractère, il ignore tout ce qui se trouve derrière, jussqu’à la fin de la ligne.\nOn peut donc documenter le script précédent :\n\n# Saisie des tailles et poids des enquêtés\ntailles &lt;- c(156, 164, 197, 147, 173)\npoids &lt;- c(45, 59, 110, 44, 88)\n\n# Calcul des tailles et poids moyens\nmean(tailles)\nmean(poids)\n\n# Calcul de l'IMC (poids en kilo divisé par les tailles en mètre au carré)\nimc &lt;- poids / (tailles / 100) ^ 2\n# Valeurs extrêmes de l'IMC\nmin(imc)\nmax(imc)"
  },
  {
    "objectID": "SFC1018_Intro_R.html#sec-install",
    "href": "SFC1018_Intro_R.html#sec-install",
    "title": "1 Introduction",
    "section": "2.5 Installation de Packages",
    "text": "2.5 Installation de Packages\nR étant un logiciel libre, il bénéficie d’un développement communautaire riche et dynamique. L’installation de base de R permet de faire énormément de choses, mais le langage dispose en plus d’un système d’extensions permettant d’ajouter facilement de nouvelles fonctionnalités. La plupart des extensions sont développées et maintenues par la communauté des utilisateurs et utilisatrices de R, et diffusées via un réseau de serveurs nommé CRAN (Comprehensive R Archive Network).\nPour installer une extension, si on dispose d’une connexion Internet, on peut utiliser le bouton Install de l’onglet Packages de RStudio. Il suffit alors d’indiquer le nom de l’extension dans le champ Package et de cliquer sur Install.\nOn peut aussi installer des extensions en utilisant la fonction install.packages() directement dans la console. Par exemple, pour installer le package tidyverse on peut exécuter la commande :\n\ninstall.packages(\"tidyverse\")\n\nInstaller une extension via l’une des deux méthodes précédentes va télécharger l’ensemble des fichiers nécessaires depuis l’une des machines du CRAN, puis installer tout ça sur le disque dur de votre ordinateur. Vous n’avez besoin de le faire qu’une fois, comme vous le faites pour installer un programme sur votre Mac ou PC.\nUne fois l’extension installée, il faut la “charger” avant de pouvoir utiliser les fonctions qu’elle propose. Ceci se fait avec la fonction library. Par exemple, pour pouvoir utiliser les fonctions de tidyverse, vous devrez exécuter la commande suivante :\n\nlibrary(tidyverse)\n\nAinsi, on regroupe en général en début de script toute une série d’appels à library qui permettent de charger tous les packages utilisés dans le script."
  },
  {
    "objectID": "SFC1018_Intro_R.html#exercices",
    "href": "SFC1018_Intro_R.html#exercices",
    "title": "1 Introduction",
    "section": "2.6 Exercices",
    "text": "2.6 Exercices\n\n2.6.1 Exercice 1\nConstruire le vecteur x suivant :\n\n\n[1] 120 134 256  12\n\n\nUtiliser ce vecteur x pour générer les deux vecteurs suivants :\n\n\n[1] 220 234 356 112\n\n\n[1] 240 268 512  24\n\n\n\n\n2.6.2 Exercice 2\nOn a demandé à 4 ménages le revenu des deux conjoints, et le nombre de personnes du ménage :\n\nconjoint1 &lt;- c(1200, 1180, 1750, 2100)\nconjoint2 &lt;- c(1450, 1870, 1690, 0)\nnb_personnes &lt;- c(4, 2, 3, 2)\n\nCalculer le revenu total de chaque ménage, puis diviser par le nombre de personnes pour obtenir le revenu par personne de chaque ménage.\nCalculer le revenu minimum et maximum parmi ceux du premier conjoint.\n\n\n2.6.3 Exercice 3\nRecommencer avec les revenus suivants, parmi lesquels l’un des enquetés n’a pas voulu répondre :\n\nconjoint1 &lt;- c(1200, 1180, 1750, NA)\n\n\n\n2.6.4 Exercice 4\nLes deux vecteurs suivants représentent les précipitations (en mm) et la température (en °C) moyennes pour chaque mois de l’année pour la ville de Lyon (moyennes calculées sur la période 1981-2010) :\n\ntemperature &lt;- c(3.4, 4.8, 8.4, 11.4, 15.8, 19.4, 22.2, 21.6, 17.6, 13.4, 7.6, 4.4)\nprecipitations &lt;- c(47.2, 44.1, 50.4, 74.9, 90.8, 75.6, 63.7, 62, 87.5, 98.6, 81.9, 55.2)\n\nCalculer la température moyenne sur l’année.\nCalculer la quantité totale de précipitations sur l’année.\nÀ quoi correspond et comment peut-on interpréter le résultat de la fonction suivante ? Vous pouvez vous aider de la page d’aide de la fonction si nécessaire.\n\ncumsum(precipitations)\n\n [1]  47.2  91.3 141.7 216.6 307.4 383.0 446.7 508.7 596.2 694.8 776.7 831.9\n\n\nMême question pour :\n\ndiff(temperature)\n\n [1]  1.4  3.6  3.0  4.4  3.6  2.8 -0.6 -4.0 -4.2 -5.8 -3.2\n\n\n\n\n2.6.5 Exercice 5\nOn a relevé les notes en maths, anglais et sport d’une classe de 6 élèves et on a stocké ces données dans trois vecteurs :\n\nmaths &lt;- c(12, 16, 8, 18, 6, 10)\nanglais &lt;- c(14, 9, 13, 15, 17, 11)\nsport &lt;- c(18, 11, 14, 10, 8, 12)\n\nCalculer la moyenne des élèves de la classe en anglais.\nCalculer la moyenne générale de chaque élève (la moyenne des ses notes dans les trois matières).\nEssayez de comprendre le résultat des deux fonctions suivantes (vous pouvez vous aider de la page d’aide de ces fonctions) :\n\npmin(maths, anglais, sport)\n\n[1] 12  9  8 10  6 10\n\n\n\npmax(maths, anglais, sport)\n\n[1] 18 16 14 18 17 12"
  },
  {
    "objectID": "SFC1018_Intro_R.html#tableau-de-données-data-frame",
    "href": "SFC1018_Intro_R.html#tableau-de-données-data-frame",
    "title": "1 Introduction",
    "section": "3.1 Tableau de données (data frame)",
    "text": "3.1 Tableau de données (data frame)\nUn data frame (ou tableau de données, ou table) est un type d’objet R qui contient des données au format tabulaire, avec les observations en ligne et les variables en colonnes, comme dans une feuille de tableur Excel.\nSi on se contente d’exécuter le nom de notre tableau de données R va, comme à son habitude, nous l’afficher dans la console, ce qui est tout sauf utile.\n\ndiamonds\n\nUne autre manière d’afficher le contenu du tableau est de cliquer sur l’icône en forme de tableau à droite du nom de l’objet dans l’onglet Environment ou d’utiliser la fonction View :\n\nView(diamonds)\n\nDans les deux cas votre tableau devrait s’afficher dans RStudio sous forme de tableau directement.\nIl est important de comprendre que l’objet diamonds contient l’intégralité des données du tableau. On voit donc qu’un objet peut contenir des données de types très différents (simple nombre, texte, vecteur, tableau de données entier), et être potentiellement de très grande taille3.\n\n\n\n\n\n\nNote\n\n\n\nSous R, on peut importer ou créer autant de tableaux de données qu’on le souhaite, dans les limites des capacités de sa machine.\n\n\nUn data frame peut être manipulé comme les autres objets vus précédemment. On peut par exemple faire :\n\nd &lt;- diamonds\n\nce qui va entraîner la copie de l’ensemble de nos données dans un nouvel objet nommé d. Ceci peut paraître parfaitement inutile mais a en fait l’avantage de fournir un objet avec un nom beaucoup plus court, ce qui diminuera la quantité de texte à saisir par la suite.\nPour résumer, notre fichier de travail sur les données des diamants pourraient donc ressembler à ceci :\n\n## Chargement des extensions nécessaires\nlibrary(ggplot2)\n\n## Jeu de données diamonds\ndata(diamonds)\nd &lt;- diamonds\n\n\n3.1.1 Structure du tableau\nUn tableau étant un objet comme un autre, on peut lui appliquer des fonctions. Par exemple, nrow et ncol retournent le nombre de lignes et de colonnes du tableau.\n\nnrow(d)\n\n[1] 53940\n\n\n\nncol(d)\n\n[1] 10\n\n\nLa fonction dim renvoie ses dimensions, donc les deux nombres précédents.\n\ndim(d)\n\n[1] 53940    10\n\n\nLa fonction names retourne les noms des colonnes du tableau, c’est-à-dire la liste de nos variables.\n\nnames(d)\n\n [1] \"carat\"   \"cut\"     \"color\"   \"clarity\" \"depth\"   \"table\"   \"price\"  \n [8] \"x\"       \"y\"       \"z\"      \n\n\nEnfin, la fonction str renvoie un descriptif plus détaillé de la structure du tableau. Elle liste les différentes variables, indique leur type 4 et affiche les premières valeurs.\n\nstr(d)\n\ntibble [53,940 × 10] (S3: tbl_df/tbl/data.frame)\n $ carat  : num [1:53940] 0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23 ...\n $ cut    : Ord.factor w/ 5 levels \"Fair\"&lt;\"Good\"&lt;..: 5 4 2 4 2 3 3 3 1 3 ...\n $ color  : Ord.factor w/ 7 levels \"D\"&lt;\"E\"&lt;\"F\"&lt;\"G\"&lt;..: 2 2 2 6 7 7 6 5 2 5 ...\n $ clarity: Ord.factor w/ 8 levels \"I1\"&lt;\"SI2\"&lt;\"SI1\"&lt;..: 2 3 5 4 2 6 7 3 4 5 ...\n $ depth  : num [1:53940] 61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ...\n $ table  : num [1:53940] 55 61 65 58 58 57 57 55 61 61 ...\n $ price  : int [1:53940] 326 326 327 334 335 336 336 337 337 338 ...\n $ x      : num [1:53940] 3.95 3.89 4.05 4.2 4.34 3.94 3.95 4.07 3.87 4 ...\n $ y      : num [1:53940] 3.98 3.84 4.07 4.23 4.35 3.96 3.98 4.11 3.78 4.05 ...\n $ z      : num [1:53940] 2.43 2.31 2.31 2.63 2.75 2.48 2.47 2.53 2.49 2.39 ...\n\n\nÀ noter que sous RStudio, on peut afficher à tout moment la structure d’un objet en cliquant sur l’icône de triangle sur fond bleu à gauche du nom de l’objet dans l’onglet Environment.\n\n\n3.1.2 Accéder aux variables d’un tableau\nUne opération très importante est l’accès aux variables du tableau (à ses colonnes) pour pouvoir les manipuler, effectuer des calculs, etc. On utilise pour cela l’opérateur $, qui permet d’accéder aux colonnes du tableau. Ainsi, si l’on tape :\n\nd$cut\n\n  [1] Ideal     Premium   Good      Premium   Good      Very Good Very Good\n  [8] Very Good Fair      Very Good Good      Ideal     Premium   Ideal    \n [15] Premium   Premium   Ideal     Good      Good      Very Good Good     \n [22] Very Good Very Good Very Good Very Good Very Good Premium   Very Good\n [29] Very Good Very Good Very Good Very Good Very Good Very Good Very Good\n [36] Good      Good      Good      Very Good Ideal     Ideal     Ideal    \n [43] Good      Good      Good      Premium   Very Good Good      Very Good\n [50] Very Good Very Good Ideal     Ideal     Premium   Premium   Ideal    \n [57] Premium   Very Good Very Good Good      Ideal     Premium   Ideal    \n [64] Ideal     Premium   Ideal     Ideal     Very Good Premium   Premium  \n [71] Very Good Very Good Premium   Premium   Good      Very Good Very Good\n [78] Very Good Very Good Very Good Very Good Very Good Ideal     Ideal    \n [85] Good      Premium   Premium   Premium   Premium   Premium   Ideal    \n [92] Fair      Ideal     Very Good Very Good Good      Good      Fair     \n [99] Very Good Premium   Very Good Premium   Ideal     Premium   Ideal    \n[106] Ideal     Premium   Ideal     Ideal     Ideal     Ideal     Ideal    \n[113] Premium   Very Good Ideal     Ideal     Premium   Ideal     Ideal    \n[120] Ideal     Ideal     Ideal     Very Good Fair      Fair      Premium  \n[127] Premium   Very Good Fair      Fair      Ideal     Very Good Ideal    \n[134] Very Good Very Good Premium   Very Good Premium   Ideal     Ideal    \n[141] Premium   Premium   Very Good Very Good Ideal     Good      Very Good\n[148] Very Good Very Good Ideal     Premium   Ideal     Premium   Premium  \n[155] Very Good Ideal     Ideal     Premium   Premium   Ideal     Premium  \n[162] Very Good Very Good Ideal     Ideal     Very Good Very Good Ideal    \n[169] Ideal     Good      Ideal     Premium   Very Good Ideal     Ideal    \n[176] Good      Very Good Very Good Premium   Ideal     Ideal     Ideal    \n[183] Ideal     Ideal     Good      Ideal     Very Good Premium   Very Good\n[190] Good      Good      Ideal     Premium   Premium   Premium   Premium  \n[197] Premium   Premium   Ideal     Premium  \n [ reached getOption(\"max.print\") -- omitted 53740 entries ]\nLevels: Fair &lt; Good &lt; Very Good &lt; Premium &lt; Ideal\n\n\nR va afficher l’ensemble des valeurs de la variable cut dans la console, ce qui est à nouveau fort peu utile. Mais cela nous permet de constater que d$cut est un vecteur de chaînes de caractères tels qu’on en a déjà rencontré précédemment.\nLa fonction table$colonne renvoie donc la colonne nommée colonne du tableau table, c’est-à-dire un vecteur, en général de nombres ou de chaînes de caractères.\nSi on souhaite afficher seulement les premières ou dernières valeurs d’une variable ou d’un tableau, on peut utiliser les fonctions head et tail.\n\nhead(d)\n\n# A tibble: 6 × 10\n  carat cut       color clarity depth table price     x     y     z\n  &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n\n\n\ntail(d, 10)\n\n# A tibble: 10 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.71 Premium   E     SI1      60.5    55  2756  5.79  5.74  3.49\n 2  0.71 Premium   F     SI1      59.8    62  2756  5.74  5.73  3.43\n 3  0.7  Very Good E     VS2      60.5    59  2757  5.71  5.76  3.47\n 4  0.7  Very Good E     VS2      61.2    59  2757  5.69  5.72  3.49\n 5  0.72 Premium   D     SI1      62.7    59  2757  5.69  5.73  3.58\n 6  0.72 Ideal     D     SI1      60.8    57  2757  5.75  5.76  3.5 \n 7  0.72 Good      D     SI1      63.1    55  2757  5.69  5.75  3.61\n 8  0.7  Very Good D     SI1      62.8    60  2757  5.66  5.68  3.56\n 9  0.86 Premium   H     SI2      61      58  2757  6.15  6.12  3.74\n10  0.75 Ideal     D     SI2      62.2    55  2757  5.83  5.87  3.64\n\n\nLe deuxième argument numérique permet d’indiquer le nombre de valeurs à afficher.\n\n\n3.1.3 Créer une nouvelle variable\nOn peut aussi utiliser l’opérateur $ pour créer une nouvelle variable dans notre tableau : pour cela, il suffit de lui assigner une valeur.\nPar exemple, la variable carat contient la masse du diamand. Le carat métrique équivaut à 200mg.\n\nhead(d$carat, 10)\n\n [1] 0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23\n\n\nOn peut vouloir créer une nouvelle variable dans notre tableau qui contienne la masse du diamant en mg :\n\nd$mass &lt;- d$carat * 200\n\nOn peut alors constater, soit visuellement soit dans la console, qu’une nouvelle variable (une nouvelle colonne) a bien été ajoutée au tableau.\n\nhead(d)\n\n# A tibble: 6 × 11\n  carat cut       color clarity depth table price     x     y     z  mass\n  &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43    46\n2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31    42\n3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31    46\n4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63    58\n5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75    62\n6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48    48"
  },
  {
    "objectID": "SFC1018_Intro_R.html#analyse-univariée",
    "href": "SFC1018_Intro_R.html#analyse-univariée",
    "title": "1 Introduction",
    "section": "3.2 Analyse univariée",
    "text": "3.2 Analyse univariée\nOn a donc désormais accès à un tableau de données d, dont les lignes sont des observations (des diamants), et les colonnes des variables (des caractéristiques de chacun de ces diamants), et on sait accéder à ces variables grâce à l’opérateur $.\nSi on souhaite analyser ces variables, les méthodes et fonctions utilisées seront différentes selon qu’il s’agit d’une variable quantitative (variable numérique pouvant prendre un grand nombre de valeurs : l’âge, le revenu, un pourcentage…) ou d’une variable qualitative (variable pouvant prendre un nombre limité de valeurs appelées modalités : la découpe, la couleur ou la clareté).\n\n3.2.1 Analyser une variable quantitative\nUne variable quantitative est une variable de type numérique (un nombre) qui peut prendre un grand nombre de valeurs. On en a plusieurs dans notre jeu de données, notamment la masse (variable carat ou masss) ou les tailles (x, y, etc.).\n\n3.2.1.1 Indicateurs de centralité\nCaractériser une variable quantitative, c’est essayer de décrire la manière dont ses valeurs se répartissent, ou se distribuent.\nPour cela on peut commencer par regarder les valeurs extrêmes, avec les fonctions min, max ou range.\n\nmin(d$carat)\n\n[1] 0.2\n\nmax(d$carat)\n\n[1] 5.01\n\nrange(d$carat)\n\n[1] 0.20 5.01\n\n\nOn peut aussi calculer des indicateurs de centralité : ceux-ci indiquent autour de quel nombre se répartissent les valeurs de la variable. Il y en a plusieurs, le plus connu étant la moyenne, qu’on peut calculer avec la fonction mean.\n\nmean(d$carat)\n\n[1] 0.7979397\n\n\nIl existe aussi la médiane, qui est la valeur qui sépare notre population en deux : on a la moitié de nos observations en-dessous, et la moitié au-dessus. Elle se calcule avec la fonction median.\n\nmedian(d$carat)\n\n[1] 0.7\n\n\nUne différence entre les deux indicateurs est que la médiane est beaucoup moins sensible aux valeurs “extrêmes” : on dit qu’elle est plus robuste.\n\n\n3.2.1.2 Indicateurs de dispersion\nLes indicateurs de dispersion permettent de mesurer si les valeurs sont plutôt regroupées ou au contraire plutôt dispersées.\nL’indicateur le plus simple est l’étendue de la distribution, qui décrit l’écart maximal observé entre les observations :\n\nmax(d$carat) - min(d$carat)\n\n[1] 4.81\n\n\nLes indicateurs de dispersion les plus utilisés sont la variance ou, de manière équivalente, l’écart-type (qui est égal à la racine carrée de la variance). On obtient la première avec la fonction var, et le second avec sd (abbréviation de standard deviation).\n\nvar(d$carat)\n\n[1] 0.2246867\n\n\n\nsd(d$carat)\n\n[1] 0.4740112\n\n\nPlus la variance ou l’écart-type sont élevés, plus les valeurs sont dispersées autour de la moyenne. À l’inverse, plus ils sont faibles et plus les valeurs sont regroupées.\nUne autre manière de mesurer la dispersion est de calculer les quartiles :\n\nle premier quartile est la valeur pour laquelle on a 25% des observations en dessous et 75% au dessus\nle deuxième quartile est la valeur pour laquelle on a 50% des observations en dessous et 50% au dessus (c’est donc la médiane)\nle troisième quartile est la valeur pour laquelle on a 75% des observations en dessous et 25% au dessus\n\nOn peut les calculer avec la fonction quantile :\n\n## Premier quartile\nquantile(d$carat, prob = 0.25)\n\n25% \n0.4 \n\n\n\n## Troisième quartile\nquantile(d$carat, prob = 0.75)\n\n 75% \n1.04 \n\n\nquantile prend deux arguments principaux : le vecteur dont on veut calculer le quantile, et un argument prob qui indique quel quantile on souhaite obtenir. prob prend une valeur entre 0 et 1 : 0.5 est la médiane, 0.25 le premier quartile, 0.1 le premier décile, etc.\nNotons enfin que la fonction summary permet d’obtenir d’un seul coup plusieurs indicateurs classiques :\n\nsummary(d$carat)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.2000  0.4000  0.7000  0.7979  1.0400  5.0100 \n\n\n\n\n3.2.1.3 Représentation graphique\nL’outil le plus utile pour étudier la distribution des valeurs d’une variable quantitative reste la représentation graphique.\nLa représentation la plus courante est sans doute l’histogramme. On peut l’obtenir avec la fonction hist.\n\nhist(d$carat)\n\n\n\n\n\n\n\n\nCette fonction n’a pas pour effet direct d’effectuer un calcul ou de nous renvoyer un résultat : elle génère un graphique qui va s’afficher dans l’onglet Plots de RStudio.\nOn peut personnaliser l’apparence de l’histogramme en ajoutant des arguments supplémentaires à la fonction hist. L’argument le plus important est breaks, qui permet d’indiquer le nombre de classes que l’on souhaite.\n\nhist(d$carat, breaks = 10)\n\n\n\n\n\n\n\n\n\nhist(d$carat, breaks = 70)\n\n\n\n\n\n\n\n\nLe choix d’un “bon” nombre de classes pour un histogramme n’est pas un problème simple : si on a trop peu de classes, on risque d’effacer quasiment toutes les variations, et si on en a trop on risque d’avoir trop de détails et de masquer les grandes tendances.\nLes arguments de hist permettent également de modifier la présentation du graphique. On peut ainsi changer la couleur des barres avec col, le titre avec main, les étiquettes des axes avec xlab et ylab, etc. :\n\nhist(d$carat, col = \"skyblue\",\n     main = \"Répartition des masses des diamants\",\n     xlab = \"Masse (en carat)\",\n     ylab = \"Effectif\")\n\n\n\n\n\n\n\n\nLa fonction hist fait partie des fonctions graphique de base de R. On verra plus en détail d’autres fonctions graphiques dans les prochaines semaines, consacrées à l’extension ggplot2, qui fait partie du tidyverse et qui permet la production et la personnalisation de graphiques complexes.\n\n\n\n3.2.2 Analyser une variable qualitative\nUne variable qualitative est une variable qui ne peut prendre qu’un nombre limité de valeurs, appelées modalités. Dans notre jeu de données on trouvera par exemple la découpe (cut), la couleur (color), la clareté (clarity).\nÀ noter qu’une variable qualitative peut tout-à-fait être numérique, et que certaines variables peuvent être traitées soit comme quantitatives, soit comme qualitatives.\n\n3.2.2.1 Tri à plat\nL’outil le plus utilisé pour représenter la répartition des valeurs d’une variable qualitative est le tri à plat : il s’agit simplement de compter, pour chacune des valeurs possibles de la variable (pour chacune des modalités), le nombre d’observations ayant cette valeur. Un tri à plat s’obtient sous R à l’aide de la fonction table.\n\ntable(d$cut)\n\n\n     Fair      Good Very Good   Premium     Ideal \n     1610      4906     12082     13791     21551 \n\n\nCe tableau nous indique donc pour chaque qualité de découpe, le nombre de diamants.\nUn tableau de ce type peut être affiché ou stocké dans un objet, et on peut à son tour lui appliquer des fonctions. Par exemple, la fonction sort permet de trier le tableau selon la valeur de l’effectif.\n\nd_cut &lt;- table(d$cut)\nsort(d_cut)\n\n\n     Fair      Good Very Good   Premium     Ideal \n     1610      4906     12082     13791     21551 \n\n\n\n\n\n\n\n\nWarning\n\n\n\nAttention, par défaut la fonction table n’affiche pas les valeurs manquantes (NA). Si on souhaite les inclure il faut utiliser l’argument useNA = \"always\", soit : table(d$cut, useNA = \"always\").\n\n\nÀ noter qu’on peut aussi appliquer summary à une variable qualitative. Le résultat est également le tri à plat de la variable, avec en plus le nombre de valeurs manquantes éventuelles.\n\nsummary(d$cut)\n\n     Fair      Good Very Good   Premium     Ideal \n     1610      4906     12082     13791     21551 \n\n\n\n\n3.2.2.2 Représentations graphiques\nOn peut représenter graphiquement le tri à plat d’une variable qualitative avec un diagramme en barres, obtenu avec la fonction barplot. Attention, contrairement à hist cette fonction ne s’applique pas directement à la variable mais au résultat du tri à plat de cette variable, calculé avec table. Il faut donc procéder en deux étapes.\n\nd_cut &lt;- table(d$cut)\nbarplot(d_cut)\n\n\n\n\n\n\n\n\nOn peut aussi trier le tri à plat avec la fonction sort avant de le représenter graphiquement, ce qui peut faciliter la lecture du graphique :\n\nbarplot(sort(d_cut))\n\n\n\n\n\n\n\n\nUne alternative au graphique en barres est le diagramme de Cleveland, qu’on peut obtenir avec la fonction dotchart. Celle-ci s’applique elle aussi au tri à plat de la variable calculé avec table.\n\ndotchart(table(d$cut))\n\n\n\n\n\n\n\n\nLà aussi, pour améliorer la lisibilité du graphique il est préférable de trier le tri à plat de la variable avant de le représenter :\n\ndotchart(sort(table(d$cut)))"
  },
  {
    "objectID": "SFC1018_Intro_R.html#exercices-1",
    "href": "SFC1018_Intro_R.html#exercices-1",
    "title": "1 Introduction",
    "section": "3.3 Exercices",
    "text": "3.3 Exercices\n\n3.3.1 Exercice 1\nCréer un nouveau script qui effectue les actions suivantes :\n\ncharger l’extension ggplot2\ncharger le jeu de données nommé mpg\ncopier le jeu de données dans un nouvel objet nommé df\nafficher les dimensions et la liste des variables de df\n\n\n\n3.3.2 Exercice 2\nOn souhaite étudier la consommation en ville et sur autoroute. Pour cela, affichez les principaux indicateurs les variables consernées : valeur minimale, maximale, moyenne, médiane et écart-type. Représentez ensuite leurs distributions par des histogrammes en 10 classes.\nCréez un nouvelle variable, conso, qui sera égale à la moyenne de la consommation en ville et de celle sur autoroute. Répondez aux mêmes questions à nouveau avec cette variable.\n\n\n3.3.3 Exercice 3\nOn s’intéresse maintenant aux marques des voitures, aux classes de voitures et à leur année de production. Faites un tri à plat pour les variables appropriées.\nReprésentez graphiquement ces effectifs à l’aide d’un graphique en barres."
  },
  {
    "objectID": "SFC1018_Intro_R.html#footnotes",
    "href": "SFC1018_Intro_R.html#footnotes",
    "title": "1 Introduction",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nEt permet de constater que pour R, un nombre est un vecteur à un seul élément.↩︎\nc est l’abbréviation de combine, son nom est très court car on l’utilise très souvent↩︎\nLa seule limite pour la taille d’un objet étant la mémoire vive (RAM) de la machine sur laquelle tourne la session R.↩︎\nLes différents types de variables seront décrits plus en détail un peu plus tard↩︎"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SFC1018",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  }
]