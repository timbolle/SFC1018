---
title: "Traitement de données avec R"
---

# Le tidyverse

Le terme *tidyverse* est une contraction de *tidy* (qu'on pourrait traduire par "bien rangé") et de *universe*. Il s'agit en fait d'une collection d'extensions conçues pour travailler ensemble et basées sur une philosophie commune.

Elles abordent un très grand nombre d'opérations courantes dans R (la liste n'est pas exhaustive) :

-   visualisation
-   manipulation des tableaux de données
-   import/export de données
-   manipulation de variables
-   extraction de données du Web
-   programmation

Un des objectifs de ces extensions est de fournir des fonctions avec une syntaxe cohérente, qui fonctionnent bien ensemble, et qui retournent des résultats prévisibles. Elles sont en grande partie issues du travail d'[Hadley Wickham](http://hadley.nz/), qui travaille désormais pour [RStudio](https://www.rstudio.com).

## Installation

`tidyverse` est également le nom d'une extension qu'on peut installer de manière classique, soit via le bouton *Install* de l'onglet *Packages* de RStudio, soit en utilisant la commande :

```{r eval=FALSE}
install.packages("tidyverse")
```

::: callout-note
Normalement vous devriez déjà avoir fait cette installation lors de la partie précédente.
:::

Cette commande va en fait installer plusieurs extensions qui constituent le "coeur" du *tidyverse*, à savoir :

-   `ggplot2` (visualisation)
-   `dplyr` (manipulation des données)
-   `tidyr` (remise en forme des données)
-   `purrr` (programmation)
-   `readr` (importation de données)
-   `tibble` (tableaux de données)
-   `forcats` (variables qualitatives)
-   `stringr` (chaînes de caractères)
-   `lubridate` (manipulation de dates)

![Packages de l'extension tidyverse](resources/logos/core_packages.png)

De la même manière, charger l'extension avec :

```{r}
library(tidyverse)
```

Chargera l'ensemble des extensions précédentes. Elles peuvent également être chargées indépendamment.

Il existe d'autres extensions qui font partie du *tidyverse* mais qui doivent être chargées explicitement, comme par exemple `readxl` (pour l'importation de données depuis des fichiers Excel). La liste complète se trouve sur [le site officiel du *tidyverse*](https://www.tidyverse.org/packages/).

# Importer et exporter des données {#sec-import}

R n'est pas prévu pour la saisie de données, mais il bénéficie de nombreuses fonctions et packages permettant l'import de données depuis un grand nombre de formats, notamment les fichier de type CSV et les fichiers Excel.

Il est très vivement conseillé de travailler avec les projets de RStudio pour faciliter l'accès aux fichiers et pouvoir regrouper l'ensemble des éléments d'une analyse dans un dossier.

::: callout-note
Les projets permettent notamment de ne pas avoir à spécifier un chemin complet vers un fichier (sous Windows, quelque chose du genre `C:\\Users\\tim\\Documents\\projet\\data\\donnees.xlsx`) mais un chemin relatif au dossier du projet (juste `donnees.xls` si le fichier se trouve à la racine du projet, `data/donnees.xls` s'il se trouve dans un sous-dossier `data`, etc.)
:::

## Import de fichiers textes

L'extension `readr`, qui fait partie du *tidyverse*, permet l'importation de fichiers texte, notamment au format CSV (*Comma separated values*), format standard pour l'échange de données tabulaires entre logiciels.

Cette extension fait partie du "coeur" du *tidyverse*, elle est donc automatiquement chargée avec :

```{r eval=FALSE}
library(tidyverse)
```

Si votre fichier CSV suit un format CSV standard (c'est le cas s'il a été exporté depuis LibreOffice par exemple), avec des champs séparés par des virgules, vous pouvez utiliser la fonction `read_csv` en lui passant en argument le nom du fichier :

```{r, eval=FALSE}
d <- read_csv("fichier.csv")
```

::: callout-note
Ici, nous avons indiquer un nom de fichier générique qui n'est pas fournit. Ici, le fichier StarWars_Characters.csv a été placé dans un dossier *data* qui se trouve dans le même dossier que votre script R !
:::

Si votre fichier vient d'Excel, avec des valeurs séparées par des points virgule, utilisez la fonction `read_csv2` :

```{r, eval=FALSE}
d <- read_csv2("fichier.csv")
```

Dans la même famille de fonction, `read_tsv` permet d'importer des fichiers dont les valeurs sont séparées par des tabulations, et `read_delim` des fichiers délimités par un séparateur indiqué en argument.

Chaque fonction dispose de plusieurs arguments, parmi lesquels :

-   `col_names` indique si la première ligne contient le nom des colonnes (`TRUE` par défaut)
-   `col_types` permet de spécifier manuellement le type des colonnes si `readr` ne les identifie pas correctement
-   `na` est un vecteur de chaînes de caractères indiquant les valeurs devant être considérées comme manquantes. Ce vecteur vaut `c("", "NA")` par défaut

Il peut arriver, notamment sous Windows, que l'encodage des caractères accentués ne soit pas correct au moment de l'importation. On peut alors spécifier manuellement l'encodage du fichier importé à l'aide de l'option `locale`. Par exemple, si l'on est sous Mac ou Linux et que le fichier a été créé sous Windows, il est possible qu'il soit encodé au format iso-8859-1. On peut alors l'importer avec :

```{r, eval = FALSE}
d <- read_csv("fichier.csv", locale = locale(encoding = "ISO-8859-1"))
```

À l'inverse, si vous importez un fichier sous Windows et que les accents ne sont pas affichés correctement, il est sans doute encodé en UTF-8 :

```{r, eval = FALSE}
d <- read_csv("fichier.csv", locale = locale(encoding = "UTF-8"))
```

Pour plus d'informations sur ces fonctions, voir [le site de l'extension readr](http://readr.tidyverse.org/).

::: callout-note
À noter que si vous souhaitez importer des fichiers textes très volumineux le plus rapidement possible, la fonction `fread` de l'extension `data.table` est plus rapide que `read_csv`.
:::

## Import depuis un fichier Excel

L'extension `readxl`, qui fait également partie du *tidyverse*, permet d'importer des données directement depuis un fichier au format `xls`ou `xlsx`.

Elle ne fait pas partie du "coeur" du *tidyverse*, il faut donc la charger explicitement avec :

```{r}
library(readxl)
```

On peut alors utiliser la fonction `read_excel` en lui spécifiant le nom du fichier :

```{r, eval = FALSE}
d <- read_excel("fichier.xls")
```

Il est possible de spécifier la feuille et la plage de cellules que l'on souhaite importer avec les arguments `sheet` et `range` :

```{r, eval = FALSE}
d <- read_excel("fichier.xls", sheet = "Feuille2", range = "C1:F124")
```

Pour plus d'informations, voir [le site de l'extension `readxl`](http://readxl.tidyverse.org/).

## Exercice 1

Importez les données présentes dans les fichiers *StarWars_characters.csv* et celles présentes dans la feuille *character* du fichier *StarWars.xlsx*

# Les tableaux dans R

Par défaut, les tableaux dans R sont appelés de *Data Frames* (`data.frame`), dans lesquels on peut spécifier des lignes et des colonnes. La pluspart des packages pour la science des données travaillent avec des data frames. Par exemple, les jeux de données présents par défaut dans R sont des *data frames*, ici

```{r}
is.data.frame(mtcars)
```

Une autre particularité du *tidyverse* est que ces packages travaillent avec des tableaux de données au format *tibble*, qui est une évolution plus moderne du classique *data frame* du R de base. Ce format est fourni et géré par l'extension du même nom (`tibble`), qui fait partie du coeur du *tidyverse*. La plupart des fonctions des extensions du *tidyverse* acceptent des *data frames* en entrée, mais retournent un objet de classe `tibble`.

Contrairement aux *data frames*, les *tibbles* :

-   n'ont pas de noms de lignes (*rownames*)
-   autorisent des noms de colonnes invalides pour les *data frames* (espaces, caractères spéciaux, nombres...)[^1]
-   s'affichent plus intelligemment que les *data frames* : seules les premières lignes sont affichées, ainsi que quelques informations supplémentaires utiles (dimensions, types des colonnes...)
-   ne font pas de *partial matching* sur les noms de colonnes[^2]
-   affichent un avertissement si on essaie d'accéder à une colonne qui n'existe pas

[^1]: Quand on veut utiliser des noms de ce type, on doit les entourer avec des *backticks* (\`)

[^2]: Dans R de base, si une table `d` contient une colonne `qualif`, `d$qual` retournera cette colonne.

Pour autant, les tibbles restent compatibles avec les *data frames*. On peut ainsi facilement convertir un *data frame* en tibble avec `as_tibble` :

```{r paged.print=FALSE, warning=FALSE}
as_tibble(mtcars)
```

Il est intéressant de noter qu'un *tibble* est un *data frame* mais que l'inverse n'est pas vrai !

```{r}
is.data.frame(mtcars) #TRUE
is_tibble(mtcars) # FALSE
is.data.frame(as_tibble(mtcars)) #TRUE
is_tibble(as_tibble(mtcars)) #TRUE
```

Si le *data frame* d'origine a des *rownames*, on peut d'abord les convertir en colonnes avec `rownames_to_columns` :

```{r warning=FALSE, paged.print=FALSE}
d <- as_tibble(rownames_to_column(mtcars))
d
```

À l'inverse, on peut à tout moment convertir un tibble en *data frame* avec `as.data.frame` :

```{r paged.print=FALSE}
as.data.frame(d)
```

Là encore, on peut convertir la colonne `rowname` en "vrais" *rownames* avec `column_to_rownames` :

```{r warning=FALSE, paged.print=FALSE}
column_to_rownames(as.data.frame(d))
```

::: callout-note
Les deux fonctions `column_to_rownames` et `rownames_to_column` acceptent un argument supplémentaire `var` qui permet d'indiquer un nom de colonne autre que le nom `rowname` utilisé par défaut pour créer ou identifier la colonne contenant les noms de lignes.
:::

Normalement, vous ne devriez trop à avoir à vous soucier de la différence entre un *data frame* et un *tibble* dans le sens où la plupart des fonctions que nous allons utiliser acceptent les deux !

# Recoder des variables {#sec-vectorfactor}

Dans cette section, nous allons nous intéresser aux types des données lues par R et à comment il est possible de faire certains changements.

## Rappel sur les variables et les vecteurs {#sec-vecteurs}

Dans R, une variable, en général une colonne d'un tableau de données, est un objet de type *vecteur*. Un vecteur est un ensemble d'éléments, tous du même type.

On a vu qu'on peut construire un vecteur manuellement de différentes manières :

```{r}
couleur <- c("Jaune", "Jaune", "Rouge", "Vert")
nombres <- 1:10
```

Mais le plus souvent on manipule des vecteurs faisant partie d'une table importée dans R.

Pour la suite, nous allons utiliser le jeux de données *Star Wars* et essayer de faire un peu de nettoyage !

```{r}
sw <- read.csv("data/StarWars_characters.csv")
```

Quand on veut accéder à un vecteur d'un tableau de données, on peut utiliser l'opérateur `$` :

```{r eval=FALSE}
sw$name
```

Les vecteurs peuvent être de classes différentes, selon le type de données qu'ils contiennent.

On a ainsi des vecteurs de type `integer` ou `double`, qui contiennent respectivement des nombres entiers ou décimaux. Dans notre exemple, nous avons simplement une colonne de type `integer` :

```{r}
typeof(sw$height)
```

Des vecteurs de type `character`, qui contiennent des chaînes de caractères :

```{r eval=FALSE}
typeof(sw$name)
head(sw$name)
```

Et des vecteurs de type `logical`, qui ne peuvent contenir que les valeurs vraie (`TRUE`) ou fausse (`FALSE`).

```{r}
vec <- c(TRUE, FALSE, FALSE, TRUE)
typeof(vec)
```

On peut convertir un vecteur d'un type en un autre en utilisant les fonctions `as.numeric`, `as.character` ou `as.logical`. Les valeurs qui n'ont pas pu être converties sont automatiquement transformées en `NA`.

```{r}
x <- c("1", "2.35", "8.2e+03", "foo")
as.numeric(x)

y <- 2:6
as.character(y)

```

Dans nos données, nous voyons que la colonne `mass` a été importée comme étant de type `character` alors qu'il s'agit de nombre. Cela vient probablement du fait qu'un des nombre est mal formaté. La fonction `as.numeric` affiche normalement un warning lorsque qu'un élément n'a pas pu être converti.

```{r}
as.numeric(sw$mass)
```

En allant jeter un coup d'oeil dans les données, nous voyons que la masse pour *Jabba Desilijic Tiure* comporte une vigule à la place d'un point pour séparer les décimales[^3]. Nous pouvons faire un remplacement des virgules en points pour cette colonne avec la fonction `gsub`:

[^3]: Le fait que le séparateur des décimales soit un point ou une virgule peut varier d'un système à l'autre (Mac vs Windows vs langue du système).

```{r}
sw$mass <- gsub(",", ".", sw$mass)
```

Nous pouvons maintenant faire notre conversion de type:

```{r}
sw$mass <- as.numeric(sw$mass)
```

## Tests et comparaison {#sec-tests}

Un test est une opération logique de comparaison qui renvoie vrai (`TRUE`) ou faux (`FALSE`) pour chacun des éléments d'un vecteur.

Parmi les opérateurs de comparaison disponibles, on trouve notamment :

-   `==` qui teste l'égalité
-   `!=` qui teste la différence
-   `>`, `<`, `<=`, `>=` qui testent la supériorité ou l'infériorité
-   `%in%` qui teste l'appartenance à un ensemble de valeurs

Exemple le plus simple :

```{r}
2 == 3
```

```{r}
2 != 3
```

Exemple appliqué à un vecteur :

```{r}
x <- 1:10
x < 5
```

On peut combiner plusieurs tests avec les opérateurs logiques *et* (`&`) et *ou* (`|`). Ainsi, si on veut tester qu'une valeur est comprise entre 3 et 6 inclus, on peut faire :

```{r}
x >= 3 & x <= 6
```

Si on veut tester qu'une valeur est égale à "Bleu" ou à "Vert", on peut faire :

```{r}
vec <- c("Jaune", "Jaune", "Rouge", "Vert")
vec == "Jaune" | vec == "Vert"
```

À noter que dans ce cas, on peut utiliser l'opérateur `%in%`[^4], qui teste si une valeur fait partie des éléments d'un vecteur :

[^4]: Pour accéder à la page de documentation de fonctions comme `%in%`, on ne peut pas utiliser `?%in%`, qui renvoie une erreur. Vous pouvez faire `?"%in%"`, `help("%in%")` ou, dans ce cas, `?match`, car les deux fonctions sont documentées sur la même page d'aide.

```{r}
vec %in% c("Jaune", "Vert")
```

::: callout-warning
Attention, si on souhaite tester si une valeur `x` est inconnue (ou 'manquante'), c'est-à-dire si elle est codée `NA` (*Not Available*), faire le test `x == NA` *ne donnera pas le résultat escompté*. En effet, fidèle à sa réputation de rigueur informaticienne, pour R `NA == NA` ne vaut pas `TRUE` mais... `NA` (on ne sait pas si une valeur inconnue est égale à une autre valeur inconnue).

Pour tester si une valeur est inconnue (`NA`), il faut utiliser la fonction dédiée `is.na` et faire `is.na(x)`.

Cependant, par convention, `NA %in% NA` vaut `TRUE`.
:::

Enfin, on peut inverser un test avec l'opérateur *non* (`!`) :

```{r}
!(vec %in% c("Jaune", "Vert"))
```

Les tests sont notamment utilisés par le verbe `filter` de `dplyr` (que nous verrons plus loin) qui permet de sélectionner certaines lignes d'un tableau de données. On peut ainsi sélectionner les personnages de plus de 1 mètre :

```{r eval = FALSE}
filter(sw, height >= 100)
```

Ou sélectionner les personnages ayant comme *homeworld* Tatooine ou Naboo :

```{r eval = FALSE}
filter(sw, homeworld %in% c("Tatooine", "Naboo"))
```

On peut utiliser les tests pour sélectionner certains éléments d'un vecteur. Si on passe un test à l'opérateur de sélection `[]`, seuls les éléments pour lesquels ce test est vrai seront conservés :

```{r}
x <- c(12, 8, 14, 7, 6, 18)
x[x > 10]
```

Enfin, on peut aussi utiliser les tests et la sélection pour modifier les valeurs d'un vecteur. Ainsi, si on assigne une valeur à une sélection, les éléments pour lesquels le test est vrai sont remplacés par cette valeur :

```{r}
x <- c(12, 8, 14, 7, 6, 18)
x[x > 10] <- 100
x
```

En utilisant cette assignation via un test, on peut effectuer des recodages de variables. Soit le vecteur suivant :

```{r}
vec <- c("Femme", "Homme", "Femme", "Garçon")
```

Si on souhaite recoder la modalité "Garçon" en "Homme", on peut utiliser la syntaxe suivante :

```{r}
vec[vec == "Garçon"] <- "Homme"
vec
```

Cette syntaxe est tout à fait valable et couramment utilisée. On va cependant voir dans la section suivante différentes fonctions qui facilitent ces opérations de recodage.

Dans notre exemple, si nous regardons la colonne *gender*, nous voyons une valeur `"none"` qui n'a pas été comptée comme `NA`. D'ailleurs, tous les `NA` sont en faite des droids. Nous allons donc changer les `NA` et les `"none"` en `"droid"`:

```{r}
sw$gender[sw$gender == "none" | is.na(sw$gender)] <- "droid"
```


## Recoder une variable qualitative {#sec-recoder-une-variable-qualitative}

Pour rappel, on appelle variable qualitative une variable pouvant prendre un nombre limité de modalités (de valeurs possibles).

### Facteurs et `forcats` {#sec-facteurs}

Dans R, les variables qualitatives peuvent être de deux types : ou bien des vecteurs de type `character` (des chaînes de caractères), ou bien des `factor` (facteurs). Si vous utilisez les fonctions des extensions du *tidyverse* comme `readr`, `readxl` ou `haven` pour importer vos données, vos variables qualitatives seront importées sous forme de `character`. Mais dans d'autres cas elles se retrouveront parfois sous forme de `factor`.

Pour convertir une colonne en `factors`, nous pouvons utiliser la fonction `as_factor`:

```{r}
sw$gender <- as_factor(sw$gender)
```

Les facteurs sont un type de variable ne pouvant prendre qu'un nombre défini de modalités nommés *levels*.

```{r}
levels(sw$gender)
fct_count(sw$gender)
```

Ceci complique les opérations de recodage car du coup l'opération suivante, qui tente de modifier une modalité de la variable, aboutit à un avertissement, et l'opération n'est pas effectuée.

```{r eval=FALSE}
sw$gender[sw$gender == "male"] <- "homme"
```

`forcats` est une extension facilitant la manipulation des variables qualitatives, qu'elles soient sous forme de vecteurs `character` ou de facteurs. Elle fait partie du *tidyverse*, et est donc automatiquement chargée par :

```{r eval=FALSE}
library(tidyverse)
```

### Modifier les modalités d'une variable qualitative {#sec-recode}

Une opération courante consiste à modifier les valeurs d'une variable qualitative, que ce soit pour avoir des intitulés plus courts ou plus clairs ou pour regrouper des modalités entre elles.

Il existe plusieurs possibilités pour effectuer ce type de recodage, mais ici on va utiliser la fonction `fct_recode` de l'extension `forcats`. Celle-ci prend en argument une liste de recodages sous la forme `"Nouvelle valeur" = "Ancienne valeur"`.

Un exemple :

```{r}
f <- c("Pomme", "Poire", "Pomme", "Cerise")
f <- fct_recode(
    f,
    "Fraise" = "Pomme",
    "Ananas" = "Poire"
)
f
```

Si on veut par exemple traduire nos genres dans notre jeu de données

```{r}
sw$gender <- fct_recode(
    sw$gender,
    "homme" = "male",
    "femme" = "female"
)

fct_count(sw$gender)
```

Attention, les anciennes valeurs saisies doivent être exactement égales aux valeurs des modalités de la variable recodée : toute différence d'accent ou d'espace fera que ce recodage ne sera pas pris en compte. Dans ce cas, `forcats` affiche un avertissement nous indiquant qu'une valeur saisie n'a pas été trouvée dans les modalités de la variable.

```{r}
sw$gender <- fct_recode(
    sw$gender,
    "hermaphrodite" = "hérmaphrodite"
)
```

Si on souhaite recoder une modalité de la variable en `NA`, il faut (contre intuitivement) lui assigner la valeur `NULL`.

```{r}
sw$gender <- fct_recode(
    sw$gender,
    NULL = "droid"
)

fct_count(sw$gender)
```

À l'inverse, si on souhaite recoder les `NA` d'une variable, on utilisera la fonction `fct_na_value_to_level`, qui convertit toutes les valeurs manquantes (`NA`) d'un facteur en une modalité spécifique.

```{r}
sw$gender <- fct_na_value_to_level(sw$gender, level = "droid")

fct_count(sw$gender)
```

D'autres fonctions sont proposées par `forcats` pour faciliter certains recodage, comme `fct_collapse`, qui propose une autre syntaxe pratique quand on doit regrouper ensemble des modalités. Par exemple, si nous avions différentes orthographe pour les mêmes valeurs (ici il nous dira qu'il ne connait pas certains *levels* ce qui est normale) :

```{r}
sw$gender <- fct_collapse(
    sw$gender,
    "male" = c("homme", "Homme"),
    "female" = c("femme", "Femme")
)
fct_count(sw$gender)
```

N'hésitez pas à consulter la documentation de [`focats`](https://forcats.tidyverse.org/) et sa [Cheat Sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/factors.pdf) !



### Ordonner les modalités d'une variable qualitative

L'avantage des facteurs (par rapport aux vecteurs de type `character`) est que leurs modalités peuvent être ordonnées, ce qui peut faciliter la lecture de tableaux ou graphiques.

On peut ordonner les modalités d'un facteur manuellement, par exemple avec la fonction `fct_relevel()` de l'extension `forcats`.

```{r}
sw$gender <- fct_relevel(
    sw$gender,
    "male", "female", "droid",
    "hermaphrodite"
)

fct_count(sw$gender)
```

Une autre possibilité est d'ordonner les modalités d'un facteur selon les valeurs d'une autre variable. Par exemple, si nous voulons étudier la taille en fonction de l'espèce :

```{r warning=FALSE}
sw$species <- as_factor(sw$species)
sw$species <- fct_na_value_to_level(sw$species, level = "Unknown")

library(ggplot2)
ggplot(sw) +
  geom_boxplot(aes(x = species, y = height)) +
  scale_x_discrete(guide = guide_axis(angle = 90))
```

Le graphique pourrait être plus lisible si les modalités étaient triées par la taille mediane croissante. On peut dans ce cas utiliser la fonction `fct_reorder`. Celle-ci prend 3 arguments : le facteur à réordonner, la variable dont les valeurs doivent être utilisées pour ce réordonnancement, et enfin une fonction à appliquer à cette deuxième variable.

```{r warning=FALSE}
sw$spec_heigt <- fct_reorder(sw$species, sw$height, median)

ggplot(sw) +
  geom_boxplot(aes(x = spec_heigt, y = height)) +
  scale_x_discrete(guide = guide_axis(angle = 90))
```

On peut aussi effectuer le réordonnancement directement dans l'appel à `ggplot2`, sans créer de nouvelle variable.

```{r eval=FALSE, warning=FALSE}
ggplot(sw) +
  geom_boxplot(
    aes(
      x = fct_reorder(species, height, median),
      y = height
    )
  ) +
  scale_x_discrete(guide = guide_axis(angle = 90))
```

Lorsqu'on effectue un diagramme en barres avec `geom_bar`, on peut aussi réordonner les modalités selon leurs effectifs à l'aide de `fct_infreq`.

```{r}
ggplot(sw) +
  geom_bar(aes(x = fct_infreq(species)))+
  scale_x_discrete(guide = guide_axis(angle = 90))
```



### `ifelse` {#sec-if-else}

`ifelse` prend trois arguments : un test, une valeur à renvoyer si le test est vrai, et une valeur à renvoyer si le test est faux.

Voici un exemple simple :

```{r}
v <- c(12, 14, 8, 16)
ifelse(v > 10, "Supérieur à 10", "Inférieur à 10")
```

La fonction permet d'utiliser des tests combinant plusieurs variables. Par exemple, imaginons qu'on souhaite créer une nouvelle variable indiquant les hommes de plus de 180cm :

```{r eval=FALSE}
sw$cat <- ifelse(
    sw$gender == "male" & sw$height > 180,
    "Homme grand",
    "Autre"
)

view(sw)
```

### `case_when`

`case_when` est une généralisation du `ifelse` qui permet d'indiquer plusieurs tests et leurs valeurs associées.

Imaginons qu'on souhaite créer une nouvelle variable permettant d'identifier les hommes de plus de 60 ans, les femmes de plus de 60 ans, et les autres. On peut utiliser la syntaxe suivante :

```{r}
sw$cat <- case_when(
    sw$height > 180 & sw$gender == "male" ~ "Homme grand",
    sw$height > 180 & sw$gender == "female" ~ "Femme grande",
    TRUE ~ "Autre"
)

View(sw)
```

`case_when` prend en arguments une série d'instructions sous la forme `condition ~ valeur`. Il les exécute une par une, et dès qu'une `condition` est vraie, il renvoie la `valeur` associée.

La dernière clause `TRUE ~ "Autre"` permet d'assigner une valeur à toutes les lignes pour lesquelles aucune des conditions précédentes n'est vraie.

::: callout-warning
**Attention :** comme les conditions sont testées l'une après l'autre et que la valeur renvoyée est celle correspondant à la première condition vraie, l'ordre de ces conditions est très important. Il faut absolument aller du plus spécifique au plus général.
:::


## Découper une variable numérique en classes

Une autre opération courante consiste à découper une variable numérique en classes. Par exemple, on voudra transformer une variable *height*  en une variable qualitative avec des catégories *Moins de 150cm*, *150-180 cm*, etc.

On utilise pour cela la fonction `cut()` :

```{r}
sw$heightcl <- cut(sw$height, breaks = 5)

fct_count(sw$heightcl)
```

Si on donne un nombre entier à l'argument `breaks`, un nombre correspondant de classes d'amplitudes égales sont automatiquement calculées. Comme il est souvent préférable d'avoir des limites "arrondies", on peut aussi spécifier ces dernières manuellement en passant un vecteur à `breaks`.

```{r}
sw$heightcl <- cut(
    sw$height,
    breaks = c(50, 150, 175, 185, 200, 225, 300)
)

fct_count(sw$heightcl)
```


# Manipuler des chaines de caractères

Les fonctions de `forcats` vues précédemment permettent de modifier des modalités d'une variables qualitative globalement. Mais parfois on a besoin de manipuler le contenu même du texte d'une variable de type chaîne de caractères : combiner, rechercher, remplacer...

On va utiliser ici les fonctions de l'extension `stringr`. Celle-ci fait partie du coeur du *tidyverse*, elle est donc automatiquement chargée avec :

```{r}
library(tidyverse)
```

::: {.callout-note}
`stringr` est en fait une interface simplifiée aux fonctions d'une autre extension, `stringi`. Si les fonctions de `stringr` ne sont pas suffisantes ou si vous manipulez beaucoup de chaînes de caractères, n'hésitez pas à vous reporter à la documentation de `stringi`.
:::

Dans ce qui suit on va utiliser le court tableau d'exemple `d` suivant :

```{r}
d <- tibble(
  nom = c("Mr Félicien Machin", "Mme Raymonde Bidule", "M. Martial Truc", "Mme Huguette Chose"),
  adresse = c("3 rue des Fleurs", "47 ave de la Libération", "12 rue du 17 octobre 1961", "221 avenue de la Libération"),
  ville = c("Laval", "Montréal", "Québec", "Montréal")
)
```

```{r echo=FALSE}
library(knitr)
kable(d)
```


## Concaténer des chaînes {#sec-concat}

La première opération de base consiste à concaténer des chaînes de caractères entre elles. On peut le faire avec la fonction `paste`.

Par exemple, si on veut concaténer l'adresse et la ville :

```{r}
paste(d$adresse, d$ville)
```

Par défaut, `paste` concatène en ajoutant un espace entre les différentes chaînes. On peut spécifier un autre séparateur avec son argument `sep` :

```{r}
paste(d$adresse, d$ville, sep = " - ")
```

Il existe une variante, `paste0`, qui concatène sans mettre de séparateur, et qui est légèrement plus rapide :

```{r}
paste0(d$adresse, d$ville)
```

::: {.callout-note}
À noter que `paste` et `paste0` sont des fonctions R de base. L'équivalent pour `stringr` se nomme `str_c`.
:::

Parfois on cherche à concaténer les différents éléments d'un vecteur non pas avec ceux d'un autre vecteur, comme on l'a fait précédemment, mais *entre eux*. Dans ce cas `paste` seule ne fera rien :

```{r}
paste(d$ville)
```

Il faut lui ajouter un argument `collapse`, avec comme valeur la chaîne à utiliser pour concaténer les éléments :

```{r}
paste(d$ville, collapse = ", ")
```

## Convertir en majuscules / minuscules

Les fonctions `str_to_lower`, `str_to_upper` et `str_to_title` permettent respectivement de mettre en minuscules, mettre en majuscules, ou de capitaliser les éléments d'un vecteur de chaînes de caractères :

```{r}
str_to_lower(d$nom)
```

```{r}
str_to_upper(d$nom)
```
```{r}
str_to_title(d$nom)
```



## Découper des chaînes

La fonction `str_split` permet de "découper" une chaîne de caractère en fonction d'un délimiteur. On passe la chaîne en premier argument, et le délimiteur en second :

```{r}
str_split("un-deux-trois", "-")
```

On peut appliquer la fonction à un vecteur, dans ce cas le résultat sera une liste :

```{r}
str_split(d$nom, " ")
```

Ou un tableau (plus précisément une matrice) si on ajoute `simplify = TRUE`.

```{r}
str_split(d$nom, " ", simplify = TRUE)
```

Si on souhaite créer de nouvelles colonnes dans un tableau de données en découpant une colonne de type texte, on pourra utiliser la fonction `separate` de l'extension `tidyr`.

Voici juste un exemple de son utilisation :

```{r}
library(tidyr)
d %>% separate(nom, c("genre", "prenom", "nom"), sep = " ")
```


## Extraire des sous-chaînes par position

La fonction `str_sub` permet d'extraire des sous-chaînes par position, en indiquant simplement les positions des premier et dernier caractères :

```{r}
str_sub(d$ville, 1, 3)
```


## Détecter des motifs {#sec-str-detect}

`str_detect` permet de détecter la présence d'un motif parmi les élements d'un vecteur. Par exemple, si on souhaite identifier toutes les adresses contenant "Libération" :

```{r}
str_detect(d$adresse, "Libération")
```

`str_detect` renvoie un vecteur de valeurs logiques et peut donc être utilisée, par exemple, avec le verbe `filter` de `dplyr` pour extraire des sous-populations.

Une variante, `str_count`, compte le nombre d'occurrences d'une chaîne pour chaque élément d'un vecteur :

```{r}
str_count(d$ville, "s")
```


On peut aussi utiliser `str_subset` pour ne garder d'un vecteur que les éléments correspondant au motif :

```{r}
str_subset(d$adresse, "Libération")
```


## Extraire des motifs

`str_extract` permet d'extraire les valeurs correspondant à un motif. Si on lui passe comme motif une chaîne de caractère, cela aura peu d'intérêt :

```{r}
str_extract(d$adresse, "Libération")
```

`str_extract` ne récupère que la première occurrence du motif. Si on veut toutes les extraire on peut utiliser `str_extract_all`.

## Remplacer des motifs

La fonction `str_replace_all` permet de remplacer une chaîne ou un motif par une autre.

Par exemple, on peut remplacer les occurrence de "Mr" par "M." dans notre variable `nom` :

```{r}
str_replace_all(d$nom, "Mr", "M.")
```

On peut également spécifier plusieurs remplacements en une seule fois :

```{r}
str_replace_all(
    d$adresse,
    c("avenue" = "Avenue", "ave" = "Avenue", "rue" = "Rue")
)
```


## Ressources

L'ouvrage *R for Data Science*, accessible en ligne, contient [un chapitre entier](http://r4ds.had.co.nz/strings.html) sur les chaînes de caractères et les expressions régulières (en anglais).

Le [site officiel de stringr](http://stringr.tidyverse.org/) contient une [liste des fonctions](http://stringr.tidyverse.org/reference/index.html) et les pages d'aide associées, ainsi qu'un [article dédié aux expressions régulières](http://stringr.tidyverse.org/articles/regular-expressions.html).

Pour des besoins plus pointus, on pourra aussi utiliser [l'extension stringi](http://www.gagolewski.com/software/stringi/) sur laquelle est elle-même basée `stringr`.




# Exercices

## Exercice 2

Toujours avec notre jeu de données sur les personnages de Star Wars, nous allons finir de préparer et de nettoyer nos données.

Normalement les colonnes `height`, `mass`, `gender` et `species` ont déjà été traitées.

Pour toutes les autres colonnes:
- Assurez vous que toutes la valeurs `"none"` soient transformées en `NA`.
- Transformez la colonne `homeworld` en facteurs et attribuez la valeur de *Unknown* pour ceux dont on ne connait le monde d'origine.
- Pour la colonne `birth_year`, supprimez le *BBY* pour ne garder que le nombre et transformez cette colonne en nombre.
